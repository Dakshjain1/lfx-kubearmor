name: Test KubeArmor polices
run-name: ${{ github.actor }} is verifying KubeArmor policies for multiple app versions
on: [push]
jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.versions.outputs.versions }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Define Versions
        id: versions
        run: |
          versions=$(cat ./postgres/versions.txt)
          echo "versions=$versions" >> $GITHUB_OUTPUT
      - name: Display Versions
        run: |
          echo "Versions: ${{ steps.versions.outputs.versions }}"
  Test-KubeArmor-Policies:
    strategy:
      matrix:
        version: ${{ fromJSON(needs.define-matrix.outputs.versions) }}
    runs-on: ubuntu-latest
    needs: define-matrix
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Echo Version
        run: echo "Testing for version ${{ matrix.version }}"
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: set perms
        run: |
          pwd
          ls -la
          chmod +x ./.github/workflows/install-k3s.sh
          chmod +x ./.github/workflows/check-pod-ready-status.sh
          chmod +x ./contribution/k3s/install_k3s.sh
      - name: Setup a Kubernetes environment
        run: ./.github/workflows/install-k3s.sh
      - name: Wait for All Pods to be Ready
        run: |
          ./.github/workflows/check-pod-ready-status.sh
      - name: run get pods + create test-ksp namespace
        run: |
          kubectl create ns test-ksp
          kubectl get pods -A
          echo "k3s Environment setup complete."
      - name: install Helm
        run: | 
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          helm version
      - name: install KubeArmor
        run: | 
          curl -sfL http://get.kubearmor.io/ | sudo sh -s -- -b /usr/local/bin
          karmor install
      - name: apply kubearmor policies
        run: | 
          kubectl apply -f ./postgres/policy.yaml
          kubectl get ksp -n test-ksp
      - name: install application
        run: | 
          helm install my-psql oci://registry-1.docker.io/bitnamicharts/postgresql --version ${{ matrix.version }} --create-namespace -n test-ksp
          helm list -A
      - name: waiting for application to be ready
        run: |
          ./.github/workflows/check-pod-ready-status.sh test-ksp
      - name: run get pods
        run: |
          kubectl get pods -A
      - name: run tests
        run: | 
          chmod +x ./postgres/test.sh
          ./postgres/test.sh
      - name: Append Job Status to README
        if: always()  # Runs even if the previous step fails
        run: |
          touch ./postgres/${{ matrix.version }}-README.md
          echo "${{ matrix.version }} -- ${{ job.status }}" >> ./postgres/${{ matrix.version }}-README.md
      - name: Upload README
        if: always()  # Runs even if the previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: readme-${{ matrix.version }}
          path: ./postgres/${{ matrix.version }}-README.md
          retention-days: 1

  create-PR:
    if: always()  # Runs even if the previous job fails
    runs-on: ubuntu-latest
    needs: Test-KubeArmor-Policies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Download All Readme Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      - name: Merge All Job Statuses into Readme
        run: |
          ls -la artifacts/readme-*
          cat artifacts/*/*-README.md >> ./postgres/README.md
          rm -rf artifacts/
          cat ./postgres/README.md
      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git status
          git checkout -b status-update
          git push origin status-update
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "Update policy status for postgres for all versions"
          title: "Update policy status for postgres for all versions"
          branch: status-update
          base: main